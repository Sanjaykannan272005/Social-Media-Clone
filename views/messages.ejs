<%- include('partials/header') %>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-3">
            <!-- User profile card -->
            <div class="card mb-4">
                <div class="card-body text-center">
                    <img src="<%= user.avatar || '/images/default-avatar.png' %>" class="rounded-circle mb-3" width="100" height="100" alt="<%= user.username %>">
                    <h5 class="card-title"><%= user.username %></h5>
                    <p class="card-text text-muted"><%= user.email %></p>
                    <a href="/profile" class="btn btn-outline-primary btn-sm">Edit Profile</a>
                </div>
            </div>
            
            <!-- Navigation -->
            <div class="list-group mb-4">
                <a href="/dashboard" class="list-group-item list-group-item-action">
                    <i class="fas fa-home me-2"></i> Home
                </a>
                <a href="/posts" class="list-group-item list-group-item-action">
                    <i class="fas fa-newspaper me-2"></i> Posts
                </a>
                <a href="/messages" class="list-group-item list-group-item-action active">
                    <i class="fas fa-envelope me-2"></i> Messages
                </a>
                <a href="/profile" class="list-group-item list-group-item-action">
                    <i class="fas fa-user me-2"></i> Profile
                </a>
                <a href="/settings" class="list-group-item list-group-item-action">
                    <i class="fas fa-cog me-2"></i> Settings
                </a>
            </div>
        </div>
        
        <div class="col-md-9">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Messages</h5>
                </div>
                <div class="card-body p-0">
                    <div class="row g-0">
                        <!-- Contacts list -->
                        <div class="col-md-3 border-end">
                            <div class="contacts-list" style="height: 700px; overflow-y: auto;">
                                <% if (contacts && contacts.length > 0) { %>
                                    <% contacts.forEach(contact => { %>
                                        <div class="contact-item p-3 border-bottom" data-user-id="<%= contact.id %>">
                                            <div class="d-flex align-items-center">
                                                <img src="<%= contact.avatar || '/images/default-avatar.png' %>" class="rounded-circle me-2" width="40" height="40">
                                                <div class="flex-grow-1">
                                                    <div class="fw-bold"><%= contact.username %></div>
                                                    <div class="text-muted small text-truncate" style="max-width: 150px;">
                                                        <%= contact.last_message || 'No messages yet' %>
                                                    </div>
                                                </div>
                                                <% if (contact.last_message_time) { %>
                                                    <div class="text-muted small">
                                                        <%= new Date(contact.last_message_time).toLocaleDateString() %>
                                                    </div>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <div class="p-4 text-center text-muted">
                                        <i class="fas fa-users mb-3" style="font-size: 2rem;"></i>
                                        <p>Follow some users to start messaging</p>
                                        <a href="/dashboard" class="btn btn-primary btn-sm">Find Users</a>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                        
                        <!-- Chat area -->
                        <div class="col-md-9">
                            <div class="chat-container d-flex flex-column" style="height: 700px;">
                                <div class="text-center my-auto">
                                    <i class="fas fa-comments mb-3" style="font-size: 3rem; color: #ddd;"></i>
                                    <h5>Select a conversation</h5>
                                    <p class="text-muted">Choose a contact to start messaging</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const contactItems = document.querySelectorAll('.contact-item');
        const chatContainer = document.querySelector('.chat-container');
        let currentChatUserId = null;
        const currentUserId = '<%= user.id %>';
        
        // Connect to Socket.IO
        const socket = io();
        
        // Listen for new messages
        socket.on('newMessage', function(message) {
            console.log('New message received via socket:', message);
            
            // Only add message to current chat if it's from the current chat partner
            // AND not from the current user (to avoid duplicates)
            if (currentChatUserId && 
                message.sender_id == currentChatUserId && 
                message.receiver_id == currentUserId) {
                addMessageToChat(message);
            }
            
            // Update the last message in contacts list
            updateContactLastMessage(message);
        });
        
        contactItems.forEach(item => {
            item.addEventListener('click', function() {
                const userId = this.dataset.userId;
                const username = this.querySelector('.fw-bold').textContent;
                const avatar = this.querySelector('img').src;
                
                // Set current chat user
                currentChatUserId = userId;
                
                // Highlight selected contact
                contactItems.forEach(c => c.classList.remove('active', 'bg-light'));
                this.classList.add('active', 'bg-light');
                
                // Load chat interface
                loadChatInterface(userId, username, avatar);
            });
        });
        
        function loadChatInterface(userId, username, avatar) {
            chatContainer.innerHTML = `
                <div class="chat-header p-2 border-bottom">
                    <div class="d-flex align-items-center">
                        <img src="${avatar}" class="rounded-circle me-2" width="40" height="40">
                        <div class="fw-bold">${username}</div>
                    </div>
                </div>
                <div class="chat-messages p-3 flex-grow-1 overflow-auto" style="height: 600px;" id="chatMessages">
                    <div class="text-center my-4 text-muted">
                        <p>Start of conversation</p>
                    </div>
                </div>
                <div class="chat-input p-2 border-top">
                    <form id="messageForm" enctype="multipart/form-data">
                        <div id="mediaPreviewContainer" class="mb-2" style="display: none;">
                            <div class="position-relative d-inline-block">
                                <img id="chatImagePreview" class="img-fluid rounded" style="max-height: 100px; display: none;">
                                <video id="chatVideoPreview" class="img-fluid rounded" controls style="max-height: 100px; display: none;"></video>
                                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0" id="removeChatMedia">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Type a message..." id="messageInput">
                            <label for="chatMediaUpload" class="btn btn-outline-secondary" title="Add Media">
                                <i class="fas fa-paperclip"></i>
                            </label>
                            <input type="file" id="chatMediaUpload" name="media" accept="image/*,video/*" style="display: none;">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
            `;
            
            // Set up message form and media upload
            const messageForm = document.getElementById('messageForm');
            const chatMediaUpload = document.getElementById('chatMediaUpload');
            const chatImagePreview = document.getElementById('chatImagePreview');
            const chatVideoPreview = document.getElementById('chatVideoPreview');
            const mediaPreviewContainer = document.getElementById('mediaPreviewContainer');
            const removeChatMedia = document.getElementById('removeChatMedia');
            
            // Handle media selection
            chatMediaUpload.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        if (file.type.startsWith('image/')) {
                            chatImagePreview.src = e.target.result;
                            chatImagePreview.style.display = 'block';
                            chatVideoPreview.style.display = 'none';
                        } else if (file.type.startsWith('video/')) {
                            chatVideoPreview.src = e.target.result;
                            chatVideoPreview.style.display = 'block';
                            chatImagePreview.style.display = 'none';
                        }
                        mediaPreviewContainer.style.display = 'block';
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
            
            // Remove selected media
            removeChatMedia.addEventListener('click', function() {
                chatMediaUpload.value = '';
                mediaPreviewContainer.style.display = 'none';
                chatImagePreview.src = '';
                chatVideoPreview.src = '';
            });
            
            // Handle form submission
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const input = document.getElementById('messageInput');
                const content = input.value.trim();
                const mediaFile = chatMediaUpload.files[0];
                
                if (content || mediaFile) {
                    sendMessage(userId, content, mediaFile);
                    input.value = '';
                    
                    // Clear media if any
                    if (mediaFile) {
                        chatMediaUpload.value = '';
                        mediaPreviewContainer.style.display = 'none';
                        chatImagePreview.src = '';
                        chatVideoPreview.src = '';
                    }
                }
            });
            
            // Load messages
            loadMessages(userId);
        }
        
        async function loadMessages(userId) {
            try {
                console.log('Loading messages for user:', userId);
                const response = await fetch(`/api/chat/messages/${userId}`);
                if (response.ok) {
                    const messages = await response.json();
                    console.log('Messages loaded:', messages.length);
                    displayMessages(messages);
                } else {
                    console.error('Failed to load messages:', response.status);
                }
            } catch (err) {
                console.error('Error loading messages:', err);
            }
        }
        
        function displayMessages(messages) {
            const chatMessages = document.getElementById('chatMessages');
            if (!chatMessages) {
                console.error('Chat messages element not found');
                return;
            }
            
            if (messages.length === 0) {
                console.log('No messages to display');
                return; // Keep the "Start of conversation" message
            }
            
            // Clear existing messages
            chatMessages.innerHTML = '';
            console.log('Displaying messages:', messages.length);
            
            messages.forEach(msg => {
                const isOutgoing = msg.sender_id == currentUserId;
                const messageElement = document.createElement('div');
                messageElement.className = `message ${isOutgoing ? 'outgoing' : 'incoming'} mb-2`;
                
                // Check if message has media (image or video)
                let mediaContent = '';
                if (msg.media_url || msg.image_url) {
                    const mediaUrl = msg.media_url || msg.image_url;
                    const mediaType = msg.media_type || 'image';
                    
                    if (mediaType === 'image') {
                        mediaContent = `<div class="mb-2"><img src="${mediaUrl}" class="img-fluid rounded chat-image" style="max-width: 200px; cursor: pointer;" data-full-img="${mediaUrl}"></div>`;
                    } else if (mediaType === 'video') {
                        mediaContent = `<div class="mb-2"><video src="${mediaUrl}" class="img-fluid rounded" controls style="max-width: 200px;"></video></div>`;
                    }
                }
                
                messageElement.innerHTML = `
                    <div class="d-flex ${isOutgoing ? 'justify-content-end' : ''}">
                        ${!isOutgoing ? `<img src="${msg.sender_avatar || '/images/default-avatar.png'}" class="rounded-circle me-2" width="30" height="30">` : ''}
                        <div class="message-content p-2 rounded ${isOutgoing ? 'bg-primary text-white' : 'bg-light'}">
                            ${mediaContent}
                            ${msg.content ? `<div>${msg.content}</div>` : ''}
                            <div class="text-${isOutgoing ? 'light' : 'muted'} small">${new Date(msg.created_at).toLocaleTimeString()}</div>
                        </div>
                    </div>
                `;
                chatMessages.appendChild(messageElement);
            });
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function addMessageToChat(message) {
            const chatMessages = document.getElementById('chatMessages');
            if (!chatMessages) return;
            
            // Remove "Start of conversation" message if it exists
            const startMessage = chatMessages.querySelector('.text-center.my-4');
            if (startMessage) {
                chatMessages.innerHTML = '';
            }
            
            const isOutgoing = message.sender_id == currentUserId;
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isOutgoing ? 'outgoing' : 'incoming'} mb-2`;
            
            // Check if message has media (image or video)
            let mediaContent = '';
            if (message.media_url || message.image_url) {
                const mediaUrl = message.media_url || message.image_url;
                const mediaType = message.media_type || 'image';
                
                if (mediaType === 'image') {
                    mediaContent = `<div class="mb-2"><img src="${mediaUrl}" class="img-fluid rounded chat-image" style="max-width: 200px; cursor: pointer;" data-full-img="${mediaUrl}"></div>`;
                } else if (mediaType === 'video') {
                    mediaContent = `<div class="mb-2"><video src="${mediaUrl}" class="img-fluid rounded" controls style="max-width: 200px;"></video></div>`;
                }
            }
            
            messageElement.innerHTML = `
                <div class="d-flex ${isOutgoing ? 'justify-content-end' : ''}">
                    ${!isOutgoing ? `<img src="${message.sender_avatar || '/images/default-avatar.png'}" class="rounded-circle me-2" width="30" height="30">` : ''}
                    <div class="message-content p-2 rounded ${isOutgoing ? 'bg-primary text-white' : 'bg-light'}">
                        ${mediaContent}
                        ${message.content ? `<div>${message.content}</div>` : ''}
                        <div class="text-${isOutgoing ? 'light' : 'muted'} small">${new Date(message.created_at || Date.now()).toLocaleTimeString()}</div>
                    </div>
                </div>
            `;
            chatMessages.appendChild(messageElement);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function updateContactLastMessage(message) {
            // Find the contact in the list
            const contactId = message.sender_id == currentUserId ? message.receiver_id : message.sender_id;
            const contactItem = document.querySelector(`.contact-item[data-user-id="${contactId}"]`);
            
            if (contactItem) {
                // Update last message text
                const lastMessageEl = contactItem.querySelector('.text-muted.small.text-truncate');
                if (lastMessageEl) {
                    lastMessageEl.textContent = message.content;
                }
                
                // Update timestamp if it exists
                const timestampEl = contactItem.querySelector('.text-muted.small:not(.text-truncate)');
                if (timestampEl) {
                    timestampEl.textContent = new Date(message.created_at || Date.now()).toLocaleDateString();
                }
                
                // Move contact to top of list
                const contactsList = contactItem.parentElement;
                contactsList.insertBefore(contactItem, contactsList.firstChild);
            }
        }
        
        async function sendMessage(receiverId, content, mediaFile = null) {
            try {
                const formData = new FormData();
                formData.append('receiver_id', receiverId);
                formData.append('content', content);
                
                if (mediaFile) {
                    formData.append('media', mediaFile);
                }
                
                // Send message via API first
                const response = await fetch('/api/chat/messages', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const message = await response.json();
                    
                    // Add message to UI immediately
                    addMessageToChat({
                        ...message,
                        sender_id: currentUserId,
                        content: content,
                        media_url: message.media_url,
                        media_type: message.media_type
                    });
                    
                    // Update the contact's last message
                    let previewText = content;
                    if (mediaFile) {
                        previewText = mediaFile.type.startsWith('image/') ? '📷 Image' : '🎥 Video';
                    }
                    
                    updateContactLastMessage({
                        sender_id: currentUserId,
                        receiver_id: receiverId,
                        content: previewText
                    });
                    
                    // Don't emit via socket - the server will do that
                    // This prevents duplicate messages
                } else {
                    console.error('Failed to send message');
                }
            } catch (err) {
                console.error('Error sending message:', err);
            }
        }
    });
</script>

<style>
    .contact-item {
        cursor: pointer;
        transition: background-color 0.2s;
    }
    
    .contact-item:hover {
        background-color: #f8f9fa;
    }
    
    .contact-item.active {
        background-color: #f0f0f0;
    }
    
    .message-content {
        max-width: 75%;
        word-break: break-word;
    }
    
    .message.incoming .message-content {
        border-radius: 18px 18px 18px 0;
    }
    
    .message.outgoing .message-content {
        border-radius: 18px 18px 0 18px;
    }
    
    /* Image modal styles */
    .image-modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        overflow: auto;
    }
    
    .image-modal-content {
        margin: auto;
        display: block;
        max-width: 90%;
        max-height: 90%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    
    .image-modal-close {
        position: absolute;
        top: 15px;
        right: 25px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
    }
</style>

<!-- Image Modal -->
<div id="imageModal" class="image-modal">
    <span class="image-modal-close">&times;</span>
    <img class="image-modal-content" id="fullSizeImage">
</div>

<script>
    // Image modal functionality
    document.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('chat-image')) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('fullSizeImage');
            const imgSrc = e.target.getAttribute('data-full-img') || e.target.src;
            
            modal.style.display = 'block';
            modalImg.src = imgSrc;
        }
    });
    
    // Close modal when clicking the × button
    document.querySelector('.image-modal-close').addEventListener('click', function() {
        document.getElementById('imageModal').style.display = 'none';
    });
    
    // Close modal when clicking outside the image
    document.getElementById('imageModal').addEventListener('click', function(e) {
        if (e.target === this) {
            this.style.display = 'none';
        }
    });
</script>
</body>
</html>